# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - MoviezExpressRentals

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: sakila
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Wait for MySQL
        run: |
          until nc -z localhost 3306; do
            echo "Waiting for MySQL..."
            sleep 1
          done

      - name: Set up test database
        run: |
          # Import Sakila sample database if available
          if [ -f "database/sakila-schema.sql" ]; then
            mysql -h 127.0.0.1 -u root -proot sakila < database/sakila-schema.sql
          fi
          if [ -f "database/sakila-data.sql" ]; then
            mysql -h 127.0.0.1 -u root -proot sakila < database/sakila-data.sql
          fi
          # Run any custom migrations
          if [ -f "database/create_test_customer.sql" ]; then
            mysql -h 127.0.0.1 -u root -proot sakila < database/create_test_customer.sql
          fi

      - name: Start application for testing
        run: |
          # Set test environment variables
          export NODE_ENV=test
          export DB_HOST=127.0.0.1
          export DB_USER=root
          export DB_PASSWORD=root
          export DB_NAME=sakila
          export SESSION_SECRET=test-secret-key
          
          # Start the app in background
          npm start &
          
          # Wait for app to be ready
          echo "Waiting for application to start..."
          timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASSWORD: root
          DB_NAME: sakila

      - name: Run E2E tests
        run: |
          # Run Cypress tests against localhost
          export CYPRESS_BASE_URL=http://localhost:3000
          npm run test:ci
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          retention-days: 7

  build:
    runs-on: ubuntu-latest
    needs: test  # Only build if tests pass
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: npm install and build
        run: |
          npm ci
          npm run build --if-present

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Only deploy if build passes
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_596D9840D89343ADB7EC63B8EE7E17FE }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_F6020929AC844389A9259AC985A7B796 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_6B696478A01E414CA68E21E9FB909EC7 }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'MoviezExpressRentals'
          slot-name: 'Production'
          package: .

  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy  # Run smoke tests after deployment
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployed application to be ready..."
          timeout 300 bash -c 'until curl -f https://moviezexpressrentals.azurewebsites.net > /dev/null 2>&1; do sleep 10; done'

      - name: Run smoke tests against production
        run: |
          # Run only critical path tests in production
          export CYPRESS_BASE_URL=https://moviezexpressrentals.azurewebsites.net
          npm run test:auth  # Only run auth tests in production
        env:
          CYPRESS_BASE_URL: https://moviezexpressrentals.azurewebsites.net
        continue-on-error: true  # Don't fail deployment if smoke tests fail
          